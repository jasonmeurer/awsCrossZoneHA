{
"AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Cloudformation Template to add API Gateway, Lambda and Palo Alto Networks NGFW components to support Cross Zone HA",
    "Metadata": {

    },
    "Parameters": {
        "S3Bucket": {
            "Description": "S3 Bucket containing Lambda service code",
            "Type": "String",
            "Default": "jjmcrosszoneha"
        },
        "S3Key": {
            "Description": "S3 Zip file containg Lambda service code",
            "Type": "String",
            "Default": "crosszoneha.zip"
        },
        "LambdaSubnetIDs" : {
            "Description" : "Choose 2 Lambda/ApiGW Subnet IDs",
            "Type" : "List<AWS::EC2::Subnet::Id>"
        },
        "LambdaSecurityID" : {
            "Description" : "Choose the lambda/ApiGW security group",
            "Type" : "List<AWS::EC2::SecurityGroup::Id>"
        },
        "VPCID" : {
            "Description" : "Choose the VPC",
            "Type" : "AWS::EC2::VPC::Id",
            "Default": "vpc-0618f904d06212d5a"
        }
    },
    "Mappings": {

    },
    "Conditions": {

    },
    "Resources": {
        "APIEndpoint" : {
            "Type" : "AWS::EC2::VPCEndpoint",
            "Properties" : {
               "PolicyDocument" : {
                  "Version":"2012-10-17",
                  "Statement":[{
                     "Effect":"Allow",
                     "Principal": "*",
                     "Action":["*"],
                     "Resource":["*"]
                  }]
            },
            "ServiceName" : { "Fn::Sub": "com.amazonaws.${AWS::Region}.execute-api" },
            "SubnetIds" :  {"Ref":"LambdaSubnetIDs"}, 
            "SecurityGroupIds" :  {"Ref":"LambdaSecurityID"},
            "VpcEndpointType" : "Interface",   
            "VpcId" : {"Ref" : "VPCID"}
          }
         },    
        "CrossZoneRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [ {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "lambda.amazonaws.com"
                        },
                    "Action": "sts:AssumeRole"
                    } ]
                },
                "Path":"/",
                "RoleName": {"Fn::Join": ["-", ["CrossZoneHARole", { "Ref": "AWS::StackName" }]]},
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                  ],
                "Policies": [ {
                    "PolicyName" : {"Fn::Join": ["-", ["CrossZoneHAPol", { "Ref": "AWS::StackName" }]]},
                    "PolicyDocument": {
                        "Version" : "2012-10-17",
                        "Statement": [
                            {
                            "Effect": "Allow",
                            "Action": [
                                "ec2:CreateRoute",
                                "ec2:DeleteRoute",
                                "logs:*",
                                "ec2:DescribeRouteTables",
                                "ec2:ReplaceRoute",
                                "ec2:AssociateRouteTable",
                                "ec2:DescribeSecurityGroups",
                                "ec2:DescribeSubnets",
                                "ec2:DescribeVpcs"
                            ],
                            "Resource": [
                            "*"
                            ]
                        }]
                    }
                }]
            }
        },
        "CrossZoneLambda": {
            "Type": "AWS::Lambda::Function",
            "DependsOn" : "CrossZoneRole",
            "Properties": {
                "FunctionName": {"Fn::Join": ["-", ["CrossZoneHALambda", { "Ref": "AWS::StackName" }]]},
                "Code": {
                    "S3Bucket": {"Ref": "S3Bucket"},
                    "S3Key": {"Ref": "S3Key"}
                },
                "Description": "CrossZoneHA for Palo Alto Networks virtual firewalls",
                "Handler": "crosszonehawithpathcheck.lambda_handler",
                "Role": {"Fn::GetAtt": ["CrossZoneRole", "Arn"]},
                "Runtime": "python3.8",
                "Timeout": 30,
                "VpcConfig": {
                    "SecurityGroupIds" :  {"Ref":"LambdaSecurityID"},
                    "SubnetIds" :  {"Ref":"LambdaSubnetIDs"} 
                }
            }
        },
        "XZoneHaApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "DependsOn" : "APIEndpoint",
            "Properties": {
                "EndpointConfiguration": {
                    "Types": ["PRIVATE"],
                    "VpcEndpointIds" : [{"Ref":"APIEndpoint"}]
                },
                "Name": {"Fn::Join": ["-", ["APIGW", { "Ref": "AWS::StackName" }]]},
                "Description": "Used to trigged failover lambda",
                "Policy": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": "*",
                            "Action": "execute-api:Invoke",
                            "Resource": {"Fn::Sub" : "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*" }
                        },
                        {
                            "Effect": "Deny",
                            "Principal": "*",
                            "Action": "execute-api:Invoke",
                            "Resource": {"Fn::Sub" : "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*" },
                            "Condition": {
                                "StringNotEquals": {
                                    "aws:SourceVpce": {"Ref":"APIEndpoint"}
                                }
                            }
                        }
                    ]
                },
                "FailOnWarnings": true
            }
        },
        "XZoneHaRes": {
            "Type": "AWS::ApiGateway::Resource",
            "DependsOn": [
                "XZoneHaApi"
            ],
            "Properties": {
                "RestApiId": {
                    "Ref": "XZoneHaApi"
                },
                "ParentId": {
                    "Fn::GetAtt": ["XZoneHaApi", "RootResourceId"]
                },
                "PathPart": "xzoneha"
            }
        },
        "ApiPostMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "RestApiId": {
                    "Ref": "XZoneHaApi"
                },
                "ResourceId": {
                    "Ref": "XZoneHaRes"
                },
                "HttpMethod": "POST",
                "AuthorizationType": "NONE",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "POST",
                    "PassthroughBehavior" : "WHEN_NO_TEMPLATES",
                    "Uri": {
                        "Fn::Join": ["", ["arn:aws:apigateway:", {
                            "Ref": "AWS::Region"
                        }, ":lambda:path/2015-03-31/functions/", {
                            "Fn::GetAtt": ["CrossZoneLambda", "Arn"]
                        }, "/invocations"]]
                    },
                    "RequestTemplates": {
                        "application/json": {
                            "Fn::Join": [
                                "",
                                [
                                    "{\n  \"vpcid\" : \"$input.params('vpcid')\"\n",
                                    "  \"untrustgood\" : \"$input.params('untrustgood')\"\n",
                                    "  \"untrustdead\" : \"$input.params('untrustdead')\"\n",
                                    "  \"trustdead\" : \"$input.params('trustdead')\"\n",
                                    "  \"trustgood\" : \"$input.params('trustgood')\"\n}"
                                ]
                            ]
                        }
                    },
                    "IntegrationResponses": [{
                        "StatusCode": "200"
                    }]
                },
                "RequestParameters": {
                    "method.request.querystring.vpcid" : false,
                    "method.request.querystring.trustdead" : false,
                    "method.request.querystring.trustgood" : false,
                    "method.request.querystring.untrustdead" : false,
                    "method.request.querystring.untrustgood" : false
                },
                "MethodResponses": [{
                    "StatusCode": "200",
                    "ResponseModels": {
                        "application/json": "Empty"
                    }
                }]

            }
        },
        "ApiDeployment": {
            "Type": "AWS::ApiGateway::Deployment",
            "DependsOn": [
                "ApiPostMethod"
            ],
            "Properties": {
                "RestApiId": {
                    "Ref": "XZoneHaApi"
                }
            }
        },
        "XZoneApiStage": {
            "Type": "AWS::ApiGateway::Stage",
            "Properties": {
                "DeploymentId": {
                    "Ref": "ApiDeployment"
                },
                "RestApiId": {
                    "Ref": "XZoneHaApi"
                },
                "StageName": "prod"
            }
        }
        
    },
    "Outputs": {

    }
}